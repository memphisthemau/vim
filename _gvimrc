function! InitFiletypeDetect()
  syntax on
  filetype on

  " Filetype autodetect
  autocmd BufRead,BufNewFile *.txt set filetype=text
  autocmd BufRead,BufNewFile *.conf set filetype=conf
  autocmd BufRead,BufNewFile *.btx set filetype=btx
endfunction

function! InitKeyMaps()
    " Disable Vi compatibility
    set nocompatible

    " Check current map status
    " :verbose map <C-a>

    "let skip_loading_mswin=1
    source $VIMRUNTIME\mswin.vim

    " <C-Y> is mapped to <C-R> in mswin.vim, changing this to unix style
    noremap <C-Y> <C-Y>
    inoremap <C-Y> <C-Y>

    " CTRL-V is Paste
    map <C-V>   "+gP
    cmap <C-V>  <C-R>+

    " Insert today's date.
    nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
    imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

    " Framing visually highlighted strings.
    "vmap <F5> d2i"<Esc>P
    "vmap <S-F5> d2i'<Esc>P
    vmap <F2> di{}<Esc>P
    "vmap <S-F6> di()<Esc>P
    "vmap <F7> di[]<Esc>P
    "vmap <S-F7> di<><Esc>P

    " Bloomberg links.
    vmap <F8> di{fifw <Esc>pa <go>}

    " Fold markers.
    vmap <F9> dO# {{{<CR># }}}<Esc>P

    " Tab navigation shortcuts (gnome-terminal style).
    "nmap <C-S-t> :tabnew<CR>
    "nmap <C-S-d> :tabclose<CR>
    "nmap <C-S-PageUp> :tabprev<CR>
    "nmap <C-S-PageDown> :tabnext<CR>

    " Unmap CTRL-A which is mapped to 'Select all' in mswin.vim. Revert back to
    " 'increment'.
    "nunmap <C-a>
    "ounmap <C-a>
    "sunmap <C-a>
    "xunmap <C-a>

    " Record into register 'q' and playback with 'Q'
    nnoremap Q @q

    "map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    "\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    "\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

    " Auto close parentheses/brackets
    "inoremap " ""<left>
    "inoremap ' ''<left>
    "inoremap ( ()<left>
    "inoremap [ []<left>
    "inoremap { {}<left>
    "inoremap < <lt>><left>
endfunction

function! InitMouseMaps()
  " Auto copy the mouse selection
  " http://vim.wikia.com/wiki/Auto_copy_the_mouse_selection
  "noremap <LeftRelease> "+y<LeftRelease>
  "set guioptions+=a
endfunction

function! InitGuiWindow()
    " Encoding
    set encoding=utf-8

    " Enable font ligature rendering. Sometimes the ligatures don't appear
    " immediately after typing. Manually get it to appear by doing
    " screen refresh CTRL+L.
    " Reference: https://github.com/tonsky/FiraCode/issues/462
    "set renderoptions=type:directx
    set renderoptions=type:directx,renmode:3

    " No menu bar
    "set guioptions-=m

    " Enable horizontal scrollbar
    "set guioptions+=b
    "set nowrap

    " GUI font
    set guifont=Cascadia_Mono_PL_SemiLight:h11:cANSI

    " Font used for printing.
    set printfont=Cascadia_Mono_PL:h11:cANSI

    " GUI window size
    set lines=50
    set columns=87
    "
    " Set line number
    "set nonumber
    set number

    " Autoload modified files in current window
    set autoread

    " Display file status
    set laststatus=2
    set statusline=%F%m%r%h%w\ [BUFFER=%n]\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

    " Change statusline color to show insert or normal mode
    if version >= 700
        au InsertEnter * hi StatusLine cterm=reverse gui=reverse
        au InsertLeave * hi StatusLine cterm=none ctermbg=lightgrey ctermfg=black gui=none guibg=lightgrey guifg=black
    endif

    " Be aware of your current mode!
    set showmode

    " Wrap lines
    "set textwidth=80
    "set wrapmargin=2
    set textwidth=0
    set wrapmargin=0
    set formatoptions=cq

    " Draw vertical line
    set colorcolumn=80

    " No search wrapping
    set nowrapscan

    " Highlight search pattern matches
    set hlsearch

    " No Japanese IME
    set noimd imi=0 ims=0
endfunction

function! InitCursor()
    " Let the cursor stray beyond the defined text.
    set virtualedit=all

    " Don't jump cursor around, instead stay in current column.
    set nostartofline

    " Vertical cursor line
    "set cursorcolumn
    "highlight cursorcolumn guibg=#696969

    " Horizontal cursor line
    "set cursorline
    " Thin horizontal underline
    "highlight clear cursorline
    "highlight cursorline gui=underline cterm=underline

    " Change Color when entering Insert Mode
    highlight iCursor guibg=red

    " Cursor shape
    set guicursor=n-v-c:hor10-Cursor
endfunction

function! InitTabs()
    " Soft tabs
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set expandtab
endfunction

function! InitSpecialChars()
    set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
    set list

    " NonText colors
    "hi SpecialKey term=bold ctermfg=11 guibg=grey guifg=#181818
    "hi NonText term=bold ctermfg=11 guibg=grey guifg=#181818
endfunction

function! InitBackup()
    " No backup files
    set nobackup
endfunction

function! InitHighlight()
    colorscheme onedark

    " Highlights
    "hi Normal guibg=#151515 guifg=white
    "hi Normal guibg=#181818 guifg=white
    "hi Normal guibg=#181818 guifg=grey

    " Tabs
    "hi TabLine guifg=grey guibg=black gui=none
    "hi TabLineSel guifg=orange guibg=black gui=bold
    "hi TabLineFill guifg=black guibg=black gui=none

    " Line number color
    "hi LineNr guifg=#455656

    " Comment lines color
    "hi Comment guifg=cyan
    "hi SpecialComment guifg=cyan

    "hi Identifier guifg=red
    "hi Number guifg=green
    "
    " :help guibg
    "hi colorcolumn guibg=SlateBlue
endfunction

function! InitEnv()
  set directory=.,$TMP,$TEMP
  let $TMP="C:\Temp"
  let $TEMP="C:\Temp"
endfunction

function! InitDiff()
    " Ignore all same lines and show ONLY diff lines
    set diffopt=filler,context:0
endfunction

"function! Vdiff()
"    execute ":vnew"
"    execute ":diffthis"
"    execute ":wincmd w"
"    execute ":diffthis"
"    execute ":wincmd w"
"endfunction

"function! OpenSdsk()
"    :yiw
"    :!cscript //b C:\Users\mlee459\openSdsk.vbs <cword>
"endfunction

function! InitFuncs()
    "nmap <silent> ;diff :call Vdiff()<CR>
    "nmap <silent> ;s :call OpenSdsk()<CR>
endfunction

" However, this is a very dangerous autocmd to have as it will always strip
" trailing whitespace from every file a user saves. Sometimes, trailing
" whitespace is desired.
function! InitAutoRemTrailingWhitespaces()
  "autocmd BufWritePre * :%s/\s\+$//e
endfunction

function! InitWordDelimiterCharacters()
  set iskeyword+=.,/,-,a-z,A-Z
endfunction

" NOTE:Don't use the following, instead set Default programs on Windows.
"function! InitHandleURL()
"  let g:netrw_browsex_viewer= "C:\Program Files\Mozilla Firefox\firefox.exe"
"endfunction

function! InitBeepFlash()
  " Disable annoying beeping and flashing.
  set noeb vb t_vb=
endfunction

" Initialization functions
call InitFiletypeDetect()
call InitKeyMaps()
"call InitMouseMaps()
call InitGuiWindow()
call InitCursor()
call InitTabs()
call InitSpecialChars()
call InitBackup()
call InitEnv()
call InitDiff()
call InitFuncs()
call InitAutoRemTrailingWhitespaces()
call InitWordDelimiterCharacters()
"call InitHandleURL()
call InitBeepFlash()
" Ensure highlights initialized at the end.
call InitHighlight()

